#summary Developer's Guide - Component - CompareAndSync
#labels Phase-Implementation

= CompareAndSync=

== Overview ==
The *CompareAndSync* component in *Syncless* is the part of the system that handles the comparison and syncing of files and folders. From a logical point of view, it can be briefly split into 2 subcomponents; the manual subcomponent that handles all manual operations, and the seamless subcomponent that handles all the automated synchronization requests from another component, the *Monitor*.

Both sub-components are implemented very differently, as manual synchronization and automated synchronization are largely different. The manual subcomponent is implemented using a *Tree* in conjunction with the *Visitor Pattern*, while the seamless subcomponent is implemented using a *Queue*.


== Class Diagram ==



== Description of Design ==
=== Data Transfer Objects and Entities ===
Before going in depth into the design, we will first take a look at the data transfer objects (DTO) and entities used throughout CompareAndSync.


==== Request ====
Requests are data transfer objects sent to CompareAndSync when a comparison or synchronization action is to be done. The Request object is an abstract class, from which all other requests will extend from. AutoSyncRequest and ManualRequest are the respective requests for seamless and manual mode. ManualRequest is further extended to ManualSyncRequest and ManualCompareRequest.


=== CompareObject ===
CompareObjects are entities which are used during comparison and synchronization. There are basically 2 main kinds of CompareObjects, the FileCompareObject and the FolderCompareObject. RootCompareObject is a specific kind of FolderCompareObject used to represent the root paths to be compared.


== Main Components ==
We will now take a look at the main components of CompareAndSync, which can be broadly divided to the controller layer, the manual component and the seamless component.


=== Controller ===
*CompareAndSyncController* is a facade for the other layers to interact with, hiding the underlying implementations and exposing only the necessary methods for syncing.


=== Manual Components ===
As stated in the overview, the manual portion of the CompareAndSync component is done using the Tree Visitor Pattern. Although the Tree Visitor Pattern is considered a bad design pattern in some cases, the usage of this pattern in our implementation of CompareAndSync greatly enhances extensibility, as you will see later.

The classes of concern to us are:

  * CompareObjectHelper
  * BuilderVisitor
  * ComparerVisitor
  * FolderRenameVisitor
  * IVisitor
  * SyncerVisitor
  * XMLMetadataVisitor
  * XMLWriterVisitor

CompareObjectHelper is the class that contains the various traversal methods, namely, pre-traversal, post-traversal, and level-order traversal for traversing the tree. All the Visitor classes implement IVisitor interface. The general course of actions that occur for each synchronization are as follows:

  # BuilderVisitor takes in a RootCompareObject, and builds the directory trees for it under the given root paths.
  # XMLMetadataVisitor will then visit this built tree, and populate it with metadata about each file, if the file exists.
  # FolderRenameVisitor is a very specific class that will then check for folder renames.
  # Next, ComparerVisitor visits the tree and updates the state of each CompareObject based on certain attributes like the last time the file was modified.
  # SyncerVisitor will now traverse the tree and carry out the necessary actions based on the states updated by ComparerVisitor, as well as update the final state of each folder and file.
  # Finally, XMLWriterVisitor will traverse the tree, and write the updated information of each folder and file to XML.

Also, all the Visitors use pre-traversal, since it makes sense to build, populate and synchronize the CompareObjects from top-down. However, ComparerVisitor uses post-traversal because it is necessary to update the state of each folder if a file under it has changed.

=== Seamless Components ===


== Explanation of Algorithm ==


== Extending CompareAndSync ==

Tree Visitor Pattern:
http://groovy.codehaus.org/Visitor+Pattern
http://nice.sourceforge.net/visitor.html
http://www.surfscranton.com/architecture/VisitorPattern.htm
http://etymon.blogspot.com/2006/04/visitor-pattern-and-trees-considered.html