#summary Developers' Guide
#labels Phase-Implementation,Featured
#sidebar DeveloperGuideSidebar

<wiki:toc max_depth="6" />

= 1. System Overview =

     == Architecture ==
        
        Following the Model-View-Controller (MVC) model, the system is split into User  
        Interface (UI) and System Logic Layer (SLL). The UI is developed and separated 
        from SLL. The SLL follows a facade pattern. It is further divided into several sub   
        components which will work together and complete the job.

        Communication between the UI and the Core Logic is done through a Service                   
        Locator and an Interface. This allows us to change the Core Logic without 
        affecting the UI. On top of that, this also allows other developers to create 
        their own user interface to work with Syncless Core Logic.

     == Data Storing ==
      
        Syncless uses many files to store the information. We use XML to store the  
        information as it is more readable and portable. Examples are tagging.xml and 
        profiling.xml which are stored in the root folder of the application. On top of 
        that, the xml is also stored on removable devices that the user tag. These xml are 
        use to merge information between 2 computers. 

        Metadata of the folders are also stored in the folder itself in xml format. At the  
        moment, the xml is stored in the folder /.syncless and is hidden. In the future, 
        we are intending to move this to somewhere else to avoid creating too many folders 
        and files in the user's folders.

     == Interaction among Sub-components ==

        <a href = "http://code.google.com/p/big5sync/wiki/DeveloperSLLSequenceDiagrams">Sequence Diagrams</a>
 
= 2. System Components =

     == Profiling ==

        The Profiling component performs drive/computer recognization. It makes Syncless
        portable because of the ability to recognize different drives/computers by 
        creating a Globally Unique IDentifier (GUID) in each of them. It also performs 
        conversion of a physical directory/file path to a logical address, and vice versa. 
        This conversion is necessary, because !CompareAndSync only recognizes physical 
        path while Tagging recognizes a logical path.

        <a href = "http://code.google.com/p/big5sync/wiki/DeveloperComponentProfiling">More details...</a>

     == Tagging ==

        The Tagging component provides the underlying operations of creating/removing a 
        tag, tagging/untagging a folder to/from a tag, managing filter properties and 
        configuring tag properties.

        <a href = "http://code.google.com/p/big5sync/wiki/DeveloperComponentTagging">More details...</a>

     == !CompareAndSync ==

        The !CompareAndSync component in Syncless is the part of the system that handles 
        the comparison and syncing of files and folders. From a logical point of view, it 
        can be briefly split into 2 subcomponents; the manual subcomponent that handles 
        all manual operations, and the seamless subcomponent that handles all the 
        automated synchronization requests from another component, the Monitor.

        <a href = "http://code.google.com/p/big5sync/wiki/DeveloperComponentCompareAndSync">More details...</a>

     == Monitor ==

        The Monitor Component provides implementations to monitor the file system and 
        drives. This is used to detect drives changes and to provide synchronization when 
        a device is plugged in. The component monitor changes in the file system to detect 
        changes in the files and folder to synchronize them.
 
        <a href = "http://code.google.com/p/big5sync/wiki/DeveloperComponentMonitor">More details...</a>

     == Logging ==

        The Logging component performs logging of messages produced when exceptions are 
        caught to a debug log file. It also logs user actions to a user log file.

        <a href = "http://code.google.com/p/big5sync/wiki/DeveloperComponentLogging">More details...</a>

     == User Interface ==

= 3. Developing a UI for Syncless =
     == Basic ==
        
        To create a UI for Syncless, the developer just need to follow a few steps.
        # implements IUInterface. This is to provide the System Core with some fundamental methods.
        # use Service locator to get the IUIControllerInterface. This provide the basic functionality to the developer who is coding the UI.
        # Call the Init method that pass in UI itself. 

     == Advanced ==
        
        Extending Filter to other area can be done easily. This can be done by extending the Filter Object and overriding the Match method. If the filter meant to work only on file, the developer can extend !FileFilter instead. !FileFilter will let all folder pass the filter.
        
= 4. Known Issues =

= 5. Extra Tips for Developers =