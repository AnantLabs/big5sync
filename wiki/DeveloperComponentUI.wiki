#summary Developers' Guide - Component - UI
#labels Phase-Implementation
#sidebar DeveloperGuideSidebar

<wiki:toc max_depth="6" />

= Overview =

The User Interface (UI) component is in charge of handling all interactions between the user and the control layer. It is implemented using the Windows Presentation Foundation (WPF) framework which allows for the creation of a clean and professional look-and-feel. It also allows for the true separation of the UI from the `SystemLogicLayer`, allowing other developers to create their own UI to interact with our Logic Layer.

= Classes =

The UI component consists of several important sub-components, including the single instance layer - `SingleInstanceManager` , `SynclessApplication`, windows - `MainWindow`, `TagWindow`, `UntagWindow`, `TagDetailsWindow`, `ShortcutsWindow` and `OptionsWindow`, helper components - `CommandLineHelper`, `RegistryHelper`, resource dictionary - `AppResourceDictionary`, misc components - `PortableSettingsProvider`, `FolderBrowseDialogEx` and `MinimizeToTray`.

= Description of Design =

== Single Instance Layer ==
In order to support many of the other fundamental features which Syncless has such as shell integration and possible future CLI support, the UI had to convert to a single instance application which support arguments. App.xaml had to be removed and replaced with the combination of `SingleInstanceManager` and `SynclessApplication`.

== Separation of View from Control & Logic ==

The whole user interface architecture is based on the Service Locator pattern. Using this pattern, we can hide the implementation from the UI. The UI will retrieve from `Syncless.Core.ServiceLocator` the `Syncless.Core.IUIControllerInterface` Interface, which abstracts a subset of methods which the `SystemLogicLayer` will provide to the user interface.

The UI can then make use of these methods to interact with the logic layer. This decouples the UI from the `SystemLogicLayer`, preventing changes in the `SystemLogicLayer` from affecting the UI.

== Application Resource Dictionary ==
The UI makes use of the `AppResourceDictionary` to hold templates of controls and other resources such as `BrushStyles` or `ColorResources`, so as to allow for their reusability in other controls.

== Application Settings ==
The user interface makes use of session settings to keep track of settings in a session of Syncless running and and properties in C# for persistance of resources such as application settings. However, since Syncless is intended to be portable, application settings need to be stored along with Syncless instead of being stored to the User Settings locale, thus we have adapted the `PortableSettingsProvider` for use as a `CustomSettingsProvider`.

== Shell Integration ==
The UI makes use of the `RegistryHelper` to write registry entries to enable shell integration. It also uses the `CommandLineHelper` to handle command line arguments, which any action from the shell uses.

= UI Design Principles & Philosophy =

Our overall goal is to make the whole tagging and synchronization process as simple and seamless as ever.

  # Seamless - When Syncless is synchronizing files in the background, users should forget that Syncless is on.
  # Minimalist - Our interface aims to prevent cognitive overload on users.
  # Intuitive - Users should find Syncless' functionality intuitive.
  # Accessible - Users should be able to use Syncless, whether by keyboard/mouse, from the shell or drag and drag.
  # Best-of-Class - Aim to adopt the best UI practices from application and web development.
  
= Developing an alternative User Interface for Syncless =
     
To create a UI for Syncless, the developer just need to follow a few steps.
  # Implement `Syncless.Core.IUInterface`. This is to provide the System Core with a way to update the interface as and when necessary.
  # Use `Syncless.Core.ServiceLocator` to get the `IUIControllerInterface`. This provide the list of methods which the UI developer can use to call from the UI.
  # Call the Initiate method in the `IUIControllerInterface` to initiate the `SystemLogicLayer`.
  # Refer to the Developer API: `Syncless.Core.IUIControllerInterface` for all the methods which will be used.

= Credits =
We would like to thank the following resources/developers for their contributions/controls to challenges that we have encountered in the course of developing the UI.

  * *Singleton Application* - http://www.switchonthecode.com/tutorials/wpf-writing-a-single-instance-application
  * *Combined File & Folder Browser Dialog* - http://dotnetzip.codeplex.com/SourceControl/changeset/view/29832#432677
  * *WPF !ToolKit* - http://www.codeplex.com/wpf (For its !DataGrid and AutoCompleteBox, which the current WPF release is lacking)
  * *Portable Settings Provider* - http://www.codeproject.com/KB/vb/CustomSettingsProvider.aspx (C# version by gpgemini)
  * *Vista-Style Folder Browser Dialog* - http://www.ookii.org/software/dialogs/
  * *WPF NotifyIcon* - http://www.codeproject.com/KB/WPF/wpf_notifyicon.aspx