#summary Developers' Guide - Components - UI
#labels Phase-Implementation
#sidebar DeveloperGuideSidebar

<wiki:toc max_depth="6" />

= Overview =

The User Interface component is in charge of handling all interactions between the user and the control layer. It is implemented using WPF for its powerful framework which allows for the creation of clean, professional look-and-feel. It also allows for the true separation of the User Interface from the System Logic Layer, allowing other developers to create their own User Interface to interact with our Logic Layer.

= Classes =

The User Interface component consists of several important sub-components, including the single instance layer - `SingleInstanceManager` , `SynclessApplication`, windows - `MainWindow`, `TagWindow`, `UntagWindow`, `TagDetailsWindow`, `ShortcutsWindow` and `OptionsWindow`, helper components - `CommandLineHelper`, `RegistryHelper`, resource dictionary - `AppResourceDictionary`, misc components - `PortableSettingsProvider`, `FolderBrowseDialogEx` and `MinimizeToTray`.

= Description of Design =

== Single Instance Layer ==
In order to support many of the other fundamental features which Syncless has such as shell integration and possible future CLI support, the UI had to converted to a single instance application which support arguments. App.xaml had to be removed and replaced with the combination of `SingleInstanceManager` and `SynclessApplication`.

== Separation of View from Control & Logic ==

The whole user interface architecture is based on the Service Locator pattern. Using this pattern, we can hide the implementation from the UI. The UI will retrieve from Syncless.Core.ServiceLocator the Syncless.Core.IUIControllerInterface Interface, which abstracts a subset of methods which the SystemLogicLayer will provide to the user interface.

The UI can then make use of these methods to interact with the logic layer. This decouples the UI from the SystemLogicLayer, preventing changes in the System Logic Layer from affecting the UI.

== Application Resource Dictionary ==
The UI makes use of the `AppResourceDictionary` to hold templates of controls and other resources such as BrushStyles or ColorResources, so as to allow for reusability of styles 
     
= Developing a Alternative UI for Syncless =
     
To create a UI for Syncless, the developer just need to follow a few steps.
  # Implement Syncless.Core.IUInterface. This is to provide the System Core with a way to to update the interface as and when necessary.
  # Use Syncless.Core.ServiceLocator to get the IUIControllerInterface. This provide the list of methods which the UI developer can use to call from the UI.
  # Call the Initiate method in the IUIControllerInterface to initiate the System Logic Layer.

= Credits =
We would like to thank the following resources/developers for their valuable contributions to challenges that WPF developers will encounter in the course of development.

  * *Singleton Application* - http://www.switchonthecode.com/tutorials/wpf-writing-a-single-instance-application
  * *Combined File & Folder Browser Dialog* - http://dotnetzip.codeplex.com/SourceControl/changeset/view/29832#432677
  * *WPF ToolKit* - http://www.codeplex.com/wpf (For its DataGrid and Autocomplete Box, which WPF sorely lacks)