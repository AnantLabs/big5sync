#summary Developers' Guide - Component - Notification
#sidebar DeveloperGuideSidebar

<wiki:toc max_depth = "6">

= Overview =

The *Notification* component provides a low coupling medium for the control layer to pass information to the *User Interface*. It also allows the lower facade layer to pass information to the Logic layer.

= Classes =

The main important classes for Notification include `NotificationQueue` and `INotificationQueue`. Many notification is implemented in both UI and *System Logic Layer*. At UI layer, it needs to implement watchers to watch all notifications which belong to the `Notification.UINotification` namespace.

== Notification that is currently Implemented(User Interface) ==
 #  `AutoSyncCompleteNotification` - informs the User Interface that a seamless synchronization request is completed.
 #  `NothingToSyncNotification` - informs the User Interface that there is nothing to synchronize.
 #  `SyncCompleteNotification` - informs the User Interface that the synchronization is completed.
 #  `SyncStartNotification` - informs the User Interface that the synchronization is started.

== Notification that is currently Implemented(Logic Layer) ==
 #  `AddTagNotification` - informs the Logic Layer to add a tag. Used during merging of tagging profiles.
 #  `MonitorPathNotification` - informs the Logic Layer to start monitoring a path. Called after switching from manual to seamless mode.
 #  `MonitorTagNotification` - informs the Logic Layer to start monitoring a tag. Used during merging of tags.
 #  `RemoveTagNotification` - informs the Logic Layer to remove a tag. Used during removing of a tag.
 #  `TaggedPathDeletedNotification` - informs the Logic Layer that a tagged path is deleted. Used during merging of tagging profiles.
 #  `UnMonitorPathNotification` - informs the Logic Layer to start unmonitoring a path. Called after switching from manual to seamless mode.

= Description of Design =

The Notification component makes use of the observer pattern to notify its watchers to resume their threads if new notification is added to the queue. 

= Extending Notification =

To include more notifications, developers can add more enumerators to the `!NotificationCode` enumeration and extend the `AbstractNotification` class.