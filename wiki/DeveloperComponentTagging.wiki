#summary Developers' Guide - Component - Tagging
#sidebar DeveloperGuideSidebar

<wiki:toc max_depth="6" />

= Overview =

The *Tagging* component provides the underlying operations of creating and removing tags, as well as tagging and untagging folders from tags. It also manages other settings such as the filter settings per tag.

= Classes =

The Tagging component consists of several important sub-components, including a main logic layer - `TaggingLayer`, model objects - `TaggingProfile`, `Tag`, `TaggedPath` and `TagConfig`, helper components - `TagMerger`, `TaggingHelper` and `TaggingXMLHelper`.

== !TaggingLayer ==

This is the main logic layer which is called by the `SystemLogicLayer` to perform tag-related operations. When *Syncless* is started up, `SystemLogicLayer` will call `TaggingLayer` for initialization. 

When initialized, `TaggingLayer` will call `TaggingXMLHelper` to load the current tagging profile from _tagging.xml_ in the computer. If there are more than one _tagging.xml_ files available (this may happen if there are removable drives plugged into the computer), `TaggingLayer` will call `TagMerger` to perform merging of several tagging profiles based on various sources of _tagging.xml_.

=== Sequence Diagram of `Init` ===

http://big5sync.googlecode.com/files/TaggingInitResized.jpg

After initialization, `TaggingLayer` can be called to perform tag-related operations.

The main operations which will trigger interactions among the various classes in Tagging component include:
  # `CreateTag`
  # `DeleteTag`
  # `TagFolder`
  # `UntagFolder`
  # `UpdateFilter`

=== Sequence Diagram of `CreateTag` ===

http://big5sync.googlecode.com/files/TaggingCreateTag.jpg

=== Sequence Diagram of `DeleteTag` ===

http://big5sync.googlecode.com/files/TaggingDeleteTag.jpg

=== Sequence Diagram of `TagFolder` ===

http://big5sync.googlecode.com/files/TaggingTagFolder.jpg

=== Sequence Diagram of `UntagFolder` ===

http://big5sync.googlecode.com/files/TaggingUntagFolder.jpg

=== Sequence Diagram of `UpdateFilter` ===

http://big5sync.googlecode.com/files/TaggingUpdateFilter.jpg

== TaggingXMLHelper ==

This is a helper which performs XML-related operations. It reads from and writes to _tagging.xml_ which stores information of all tags and their configuration.

The conversions from a tagging profile to _tagging.xml_, and vice versa, are easily extensible. There are separate methods which take care of reading/writing each tagging profile property. If there are more properties to be added to `TaggingProfile`, only `ConvertTaggingProfileToXml` and `ConvertXmlToTaggingProfile` need to be changed, and then just create additional methods which read/write each of the new properties.

Conversion from _tagging.xml_ to `TaggingProfile`:
  # `ConvertXmlToTaggingProfile`(`XmlDocument`)
  # `CreateTaggingProfile`(`XmlElement`)
  # `CreateTagFromXml`(`XmlElement`)
  # `CreateFolders`(`XmlElement`)
  # `CreatePath`(`XmlElement`)
  # `CreateTagConfig`(`XmlElement`)
  # `LoadFilterList`(`XmlElement`)
  # `LoadFilter`(`XmlElement`)

Conversion from `TaggingProfile` to _tagging.xml_:
  # `ConvertTaggingProfileToXml`(`TaggingProfile`)
  # `CreateTagElement`(`XmlDocument`, `Tag`)
  # `CreateFoldersElements`(`XmlDocument`, `Tag`)
  # `CreateTaggedFolderElement`(`XmlDocument`, `TaggedPath`)
  # `CreateConfigElement`(`XmlDocument`, `Tag`)
  # `CreateFilterElementList`(`XmlDocument`, `Tag`)
  # `CreateFilterElement`(`XmlDocument`, `Filter`)

= Explanation of Algorithms =

== Merging Multiple _tagging.xml_ ==

Merging of multiple _tagging.xml_ files is necessary when the user maintains tags which contain folders across multiple devices. For example, the user may tag a folder in his home workstation and a folder in his office workstation to the same tag, and uses a thumbdrive as the intermediary device to sync the two folders. In this case, both his home workstation and office workstation will contain _tagging.xml_ files, as well as in the thumbdrive.

== What Properties are Checked ==

The system recognizes the differences in _tagging.xml_ files found in various sources through the following properties:
  # `ProfileName` in `TaggingProfile`
  # `TagName` in `Tag`
  # `CreatedDate` in `Tag`
  # `LastUpdatedDate` in `Tag`
  # `IsDeleted` in `Tag`
  # `CreatedDate` in `TaggedPath`
  # `LastUpdatedDate` in `TaggedPath`
  # `IsDeleted` in `TaggedPath`

== When to Merge ==

Merging of different _tagging.xml_ files will be done only if they contain the same tagging profile, ie. the name of the profile contained in all files is the same.

We denote the profile that *Syncless* is currently working on as _currentProfile_, and any other profile detected during drive-in/drive-out event will be denoted as _newProfile_. _currentProfile_ and _newProfile_ should share the same profile name.

For each _newProfile_, the system will attempt to merge _currentProfile_ with _newProfile_. 

== How to Merge ==

For clearer illustration, we denote the tag found in _newProfile_ as _newTag_ and the tag found in _currentProfile_ as _currentTag_.

For each _newTag_, if it has not already existed in _currentProfile_, it indicates that _newTag_ has been created elsewhere and should be added to _currentProfile_ so that details of _newTag_ can be displayed to the user. If _newTag_ exists in _currentProfile_, the system will do further check whether any modification has been made to the equivalent _currentTag_.

=== Merging the Tag ===

Let's take a look at the pseudo-code for the merging the tags:

{{{
  if currentTag and newTag share the same name && both tags were modified at different time
      if newTag was deleted && currentTag exists
          if both tags were created at the same time
              delete currentTag from currentProfile
              return true
          else
              return false
      if currentTag was deleted && newTag exists
          if newTag was created later than currentTag
              add newTag to currentProfile
      else
          merge paths from currentTag and newTag
      return true
  else
      return false
}}}

Basically, the system will check whether a tag is marked as deleted in one profile but exists in another profile. If that is the case, then further checks will be done on the creation time and deletion time in both tags to decide whether to add the _newTag_ to the _currentProfile_ or to delete the _currentTag_ from the _currentProfile_. If _newTag_ is added to _currentProfile_, the system needs to check whether there are any changes to the list of tagged folders in both tags. For merging of tagged paths, the algorithm will be explained in the following section.

=== Merging the !TaggedPath ===

For clearer illustration, we will denote the path found in _newTag_ as _newPath_ and the path found in _currentTag_ as _currentPath_.

Let's take a look at the pseudo-code for the merging of paths:

{{{
  if newPath is not found in currentTag
      add newPath to currentTag
  else
     if newPath is updated at a later time than the updated time of currentPath
         if newPath was deleted && currentPath exists
             if newPath was deleted later than the creation of currentPath
                 remove currentPath from currentTag
         else if currentPath was deleted && newPath exists
             if newPath was created later than the deletion of currentPath
                 add newPath to currentTag
}}}

The system first checks whether _newPath_ exists in _currentTag_, if it does not exist, then _newPath_ should be added to _currentTag_. If _newPath_ exists in _currentTag_, then the system needs to check whether there are changes made to the tagged path.

If the updated time of _newPath_ is earlier than that of _currentPath_, the system will not do anything. Otherwise, further checks will be done on the deletion time and creation time of both paths and perform addition/removal of path accordingly.

= Extending Tagging =

As a tag object is configurable, developers can extend the `TagConfig` classes to include more properties. Currently, existing properties include `IsSeamless`, `ArchiveName`, `ArchiveCount` and `Recycle`.